CREATE TABLE books
(
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100),
    author VARCHAR(100),
    subject VARCHAR(100),
    price DOUBLE,
    isbn  VARCHAR(200)
);

INSERT INTO
books
VALUES(1,"Design of UNIX OS","Stroustrop","OS",200,"0-7645-26413");

INSERT INTO
books
VALUES(2,"C++ Programming Language","Stroustrop","C++",300,"0-7645-26414");

INSERT INTO
books
VALUES(3,"C Programming Language","Stroustrop","C",500,"0-7645-26415");

INSERT INTO
books
VALUES(4,"Complete Referance-JAVA","Stroustrop","JAVA",700,"0-7645-26416");

CREATE TABLE users
(
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100),
    email VARCHAR(100),
    phone VARCHAR(20),
    password VARCHAR(100),
    role VARCHAR(50)
);

INSERT INTO 
users
VALUES(1,"Prasad Bhise","prasad@gmail.com","9096125246","prasad","User");

INSERT INTO 
users
VALUES(2,"Arti Bokse","arti@gmail.com","7276660303","arti","User");

INSERT INTO 
users
VALUES(3,"Sripad Malekar","sripad@gmail.com","9890856107","sripad","Librarian");

INSERT INTO 
users
VALUES(4,"Akash Suryawanshi","akash@gmail.com","9271371471","akash","Admin");

CREATE TABLE payments
(
    id INT AUTO_INCREMENT PRIMARY KEY,
    userid INT,
    amount DOUBLE,
    type VARCHAR(100),
    transaction_time TIME,
    nextpayment_duedate DATE,
    CONSTRAINT FK_pay_userid FOREIGN KEY (userid)
    REFERENCES users(id)
);

CREATE TABLE copies
(
    id INT AUTO_INCREMENT PRIMARY KEY,
    bookid INT,
    rack VARCHAR(50),
    status VARCHAR(50),
    CONSTRAINT FK_copies_bookid FOREIGN KEY (bookid)
    REFERENCES books(id)
);

INSERT INTO
copies
VALUES(1,1,1,"available");

INSERT INTO
copies
VALUES(2,1,1,"available");

INSERT INTO
copies
VALUES(3,2,2,"available");

INSERT INTO
copies
VALUES(4,2,2,"available");

INSERT INTO
copies
VALUES(5,3,3,"available");

INSERT INTO
copies
VALUES(6,3,3,"available");


INSERT INTO
copies
VALUES(7,4,4,"available");

INSERT INTO
copies
VALUES(8,4,4,"available");

CREATE TABLE issuerecord
(
    id INT AUTO_INCREMENT PRIMARY KEY,
    copyid INT,
    memberid INT,
    issue_date DATE,
    return_duedate DATE,
    return_date DATE,
    fine_amount DOUBLE,
    CONSTRAINT FK_issue_copyid FOREIGN KEY (copyid)
    REFERENCES copies(id),
    CONSTRAINT FK_issue_memberid FOREIGN KEY (memberid)
    REFERENCES users(id)
);
